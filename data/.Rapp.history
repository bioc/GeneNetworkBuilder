library(GeneNetworkBuilder)
data("ce.IDsMap")
head(ce.IDsMap)
data("ce.interactionmap")
head(ce.interactionmap)
data("ce.mapIDs")
head(ce.mapIDs)
hs.interactionmap<-read.csv("/opt/local/apache2/htdocs/GeneNetworkBuilder/maps/hs/tct/hs.201001.fantom4.miRNA.mirgen.csv",stringsAsFactors=F)
head(hs.interactionmap)
dim(hs.interactionmap)
setwd("~/Documents/Rscripts/GeneNetworkBuilder_1.0.0/data")
save(list="hs.interactionmap",file="hs.interactionmap",compress=T)
save(list="hs.interactionmap",file="hs.interactionmap.rda",compress=T)
geneIDs.map<-read.delim("/opt/local/apache2/htdocs/GeneNetworkBuilder/maps/hs/anno/geneIDs.map.csv",header=F,stringsAsFactors=F)
head(geneIDs.map)
geneIDs.map<-read.csv("/opt/local/apache2/htdocs/GeneNetworkBuilder/maps/hs/anno/geneIDs.map.csv",header=F,stringsAsFactors=F)
head(geneIDs.map)
hs.IDsMap<-geneIDs.map[,1]
names(hs.IDsMap)<-geneIDs.map[,2]
head(hs.IDsMap)
save(list="hs.IDsMap",file="hs.IDsMap.rda",compress=T)
geneIDs<-read.csv("/opt/local/apache2/htdocs/GeneNetworkBuilder/maps/hs/anno/geneIDs.csv",header=F,stringsAsFactors=F)
head(geneIDs)
hs.mapIDs<-geneIDs[,2]
names(hs.mapIDs)<-geneIDs[,1]
head(hs.mapIDs)
save(list="hs.mapIDs",file="hs.mapIDs.rda",compress=T)
miRNA.map<-read.delim("/opt/local/apache2/htdocs/GeneNetworkBuilder/maps/hs/anno/miRNA.map.tsv",header=F,stringsAsFactors=F)
head(miRNA.map)
data(ce.miRNA.map)
head(ce.miRNA.map)
hs.miRNA.map<-miRNA.map
save(list="hs.miRNA.map",file="hs.miRNA.map.rda",compress=T)
source("http://bioconductor.org/biocLite.R")
biocLite("RUnit")
biocLite("BiocGenerics")
checkCName<-function(colName,microarrayData){#
    re<-TRUE#
    if(is.numeric(colName)){#
        if(colName>ncol(microarrayData)){#
            re<-FALSE#
        }#
    }else{#
        if(!(colName %in% colnames(microarrayData))){#
            re<-FALSE#
        }#
    }#
    re#
}#
checkMCName<-function(arr){#
    cname<-c("from","to")#
    if(!all(colnames(arr)[1:2]==cname)){#
        stop(paste("colnames of",  deparse(substitute(arr)) , "must be c('from','to',...)"))#
    }#
}#
#
checkMap<-function(interactionmap,x){#
    cname<-c("from","to")#
    checkMCName(interactionmap)#
    checkMCName(x)#
    tf_names<-unique(c(as.vector(t(interactionmap[,cname])),as.vector(x)))#
    if(!all(!is.na(tf_names))){#
        stop("NA is involved in input data.")#
    }#
}#
#
checkmiRNAmap<-function(miRNAmap){#
    if(dim(miRNAmap)[2] != 2) stop("miRNA map must be a two column matrix or data frame")#
}#
#
getMax<-function(dl, colname="logFC"){#
    dl[match(max(abs(dl[ , colname])), abs(dl[ , colname])),]#
}#
#
getMedian<-function(dl, colname="logFC"){#
    dl[match(median(dl[ , colname]), dl[ , colname]), ]#
}#
#
getMin<-function(dl, colname="logFC"){#
    dl[match(min(abs(dl[ , colname])), abs(dl[ , colname])), ]#
}#
#
inList<-function(needle,arr){#
    toupper(needle) %in% toupper(arr)#
}
data("sample.microarrayData")
sample.microarrayData<-sample.microarrayData[abs(sample.microarrayData$logFC)>1.5 & sample.microarrayData$P.Value<0.01, ]
sample.microarrayData$symbols<-toupper(sample.microarrayData$symbols)
sample.microarrayData<-convertID(sample.microarrayData,ce.IDsMap,ByName=c("symbols"))
method<-"Max"
checkCName("symbols", microarrayData)
microarrayData<-sample.microarrayData
checkCName("symbols", microarrayData)
plyr::ddply(microarrayData, .(symbols), GeneNetworkBuilder:::getMax, condenseName)
condenseName='logFC'
plyr::ddply(microarrayData, .(symbols), GeneNetworkBuilder:::getMax, condenseName)
??plyr
?ddply
q()
